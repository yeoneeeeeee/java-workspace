package com.kh.chap02_abstractAndInterface.part02_family.model.vo;

public interface Basic {
	/*
	 * 인터페이스
	 * [표현법]
	 * [접근제한자] interface 인터페이스명 { }
	 * 
	 * - 상수필드와 추상메소드로만 이루어진 "추상 클래스의" 변형체
	 * - 인터페이스에서 필드는 무조건 상수필드이다.
	 * - 인터페이스에서 메소드는 무조건 추상메소드이다.
	 * - 무조건 구현해야하는게 있을때 인터페이스를 만들어서 상속하게 된다.
	 * - 인터페이스는 다중상속(다중구현)을 허용한다 == 상속관계에 얽메여 읶지 않다.
	 *   (결국 메소드에대한 정의만 하고있기때문에 상속받은 메소드가 겹치더라도 , 최종 구현부분은
	 *    구현 클래스에서 이루어질것이기 때문에 다중상속이 가능함.)
	 * - 추상클래스와 다르게 더 강한 규칙성 , 강제성을 가지는게 인터페이스이다.
	 * 
	 * 추상클래스와 인터페이스
	 * 1. 공통점
	 *   - 객채 생성은 안되나, 참조변수로써 사용이 가능하다 == 다형성을 적용할수 있다.
	 *   - 상속(구현)하는 클래스에 추상메소드를 구현하도록 강제한다.
	 * 
	 * 2. 차이점
	 *   - 추상클래스는 클래스내에 인스턴스변수(필드), 메소드를 생성할수 있고, 추상메서드가 포함되어
	 *    있거나 , abstract키워드로 클래스가 정의되어있고
	 *    인터페이스는 인스턴스변수(필드), 메소드 생성이 불가능하며, 모든변수는 상수필드이고, 추상
	 *    메소드로만 정의되어있다.
	 *    
	 *   - 존재하는 목적이 다르다.
	 *   
	 *    추상클래스는 추상클래스를 상속받아서 기능을 이용하고, 클래스를 "확장"(상속)하는데 목적이있고
	 *    
	 *    인터페이스는 클래스의 기능(함수) 구현을 "강제"하기위해서 사용된다. 즉 구현을 강제함으로써
	 *    구현객체의 "동일한 동작"을 보장할수 있음.
	 *    
	 *    extends와 implements
	 *    - 클래스간에 상속 관계일때 : A클래스 extends 부모클래스
	 *    - 클래스와 인터페이스의 구현관계일때 : 클래스명 implements 인터페이스명 , 인터페이스명
	 *    - 인터페이스와 인터페이스간의 상속관계 : 인터페이스명 extends 인터페이스명 , 인터페이스명
	 */
	
	
	/* public static final */ int num = 10;
	// 인터페이스에는 상수필드만 정의할수 있기 때문에 앞의 public static final이생략가능하다.
	
	/* public abstract */ void eat();
	void sleep();
	// 인터페이스에는 추상메소드만 정의할수 있기 때문에 앞에 public abstract가 생략가능하다.
	
}
