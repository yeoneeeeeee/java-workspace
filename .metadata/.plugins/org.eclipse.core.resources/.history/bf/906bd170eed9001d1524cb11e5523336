package com.kh.chap01_list.part01_arrayList.run;

public class ListRun {
	/*
	 * 컬렉션(Collection)
	 * 자료구조가 내장되어있는 클래스로 자바에서제공하는 "자료구조"를 담당하는 "프레임워크"이다.
	 * 
	 * 자료구조
	 * 방대한 데이터를 효율적으로 다룰때 필요한 개념
	 * 
	 * 프레임워크
	 * 효율적인 기능들이 이미 정의되어있는 틀
	 * 
	 * 정리해보면
	 * 데이터들이 새로이 추가되거나, 삭제가 되거나, 수정이 되는 기능들(알고리즘)들이 이미 정의되어있는 틀이 있다 == 컬렉션
	 * => 다량의 데이터들을 관리하고자 할때 배열 가지고 충분히 사용가능했었음. 단, 배열의 단점을 보완한것이 컬렉션
	 * 
	 * 배열과 컬렉션의 차이점
	 * - 배열의 단점
	 * 1. 배열을 쓰고자 할 때는 먼저 크기를 지정해줘야함
	 *    => 한번 지정한 크기는 변경이 불가
	 *       새로운 값을 추가하고자 할때 크기가 오버될 경우 새로운 크기의 배열을 만들고 기존의 내용들을 복사해주는 코드를
	 *       직접 짜야함
	 * 2. 배열 중간 위치에 새로운 데이터를 추가하거나 삭제하는 경우 기존의 값들을 땡겨주는 코드도 직접 짜야함
	 * 3. 한 타입의 데이터들만 저장 가능
	 * 
	 * - 컬렉션의 장점
	 * 1. 크기에 제약이 없다
	 *   => 크기지정을 해줄 필요도 없고 만일 크기지정을 해도 알아서 크기가 늘어나면서 새로운 데이터를 추가해주는 코드가
	 *      이미 정의되어있따.
	 * 2. 중간에 값을 추가하거나 삭제하는 경우 값을 땡겨주는 코드가 이미 메소드로 정의되어 있음
	 * 3. 기본적으로 여러 타입의 데이터들을 저장할 수 있음(단, 제네릭 설정을 통해서 한 타입의 데이터들만 들어올수 있게도함)
	 * 
	 * 방대한 데이터들을 단지 담아만 두고 조회할 목적 => 배열
	 * 방대한 데이터들을 빈번하게 추가 ,삭제 ,수정할 목적 => 컬렉션
	 * 
	 * 컬렉션의 3가지 분류
	 * List 계열 : 담고자 하는 값(value)만 저장 / 값 저장시 순서 유지가됨(index 개념이 있음) / 중복값 허용
	 *         예) ArrayList, Vector, LinkedList => ArrayList가 제일많이쓰임
	 * Set  계열 : 담고자 하는 값(value)만 저장 / 값 저장할때 순서 유지가 안됨(index가 없음) / 중복값 허용x
	 *         예) HashSet, TreeSet
	 * Map  계열 : 키(Key) + 담고자 하는 값(value) 세트로 저장/ 값 저장시 순서유지 x / key값은 중복 허용x
	 *         예) HashMap , Properties
	 */
	
	
	public static void main(String[] args) {

	}

}
