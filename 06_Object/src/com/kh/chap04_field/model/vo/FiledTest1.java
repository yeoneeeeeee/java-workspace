package com.kh.chap04_field.model.vo;

/*
 * 변수구분
 * -전역변수 : 클래스 영역에 바로선언하는 변수 => 클래스 내에서면 어디서든 사용 가능 
 * 
 * -지역변수 : 클래스 영역 내의 어떤 특정한 구역({})에 선언한 변수(선언한 지역에서만 사용 가능)
 *         ex) 메소드, 제어문(if , for) 등등
 * 
 * 1. 전연변수 (2가지로 구분이 됨)
 *  - 멤버변수 == 인스턴스변수 == 필드
 *    생성시점 : new 연산자를 통해서 해당 객체가 생성하는 순간 메모리 영역에 할당
 *    소멸시점 : 객체 소멸시 같이 소멸
 *  
 *  - 클래스변수 == static 변수 : static이라는 예약어가 붙어 있냐 아니냐에 따라 멤버변수냐 클래스변수냐로 구분
 *    생성시점 : 프로그램 실행과 동시에(해당 객체 생성이 안되도) 메모리 영역(static 영역)에 할당
 *    소멸시점 : 프로그롬이 종료될때 소멸
 *    
 * 2. 지역변수
 *    생성시점 : 특정한 구역({}) 실행(호출)시 메모리 영역에 할당(ex) 메소드 실행시)
 *    소멸시점 : 특정한 구역({}) 종료시 소멸(ex) 메소드 종료시)  
 *    
 * 
 *    (+)public => 어디서든 접근 가능하게 하고싶다
 *    (#)protected => 같은 패키지라면 무조건 접근가능, 다른 패키지라면 상속구조인 클래스에서만 접근가능
 *    (~)default => 오로지 같은 패키지 안에서만 접근 가능, 생략가능
 *    (-)private => 오직 해당 클래스 안에서만 접근가능
 *    
 *    위에서부터 아래로 내려갈수록 접근할수 있는 범위가 좁아진다.
 */

// 변수 선언 위치에 따른 구분(전역변수 , 지역변수 , 매개변수)
public class FiledTest1 { // 클래스 시작부분.
	
	private int global = 1;//멤버변수 == 인스턴스 == 필드
	
	protected String pro ="protected";
	String df = "default";
	
	public void test(int num) { // test메소드 시작
		// 매개변수(지역변수)
		
		// 지역변수(메소드 영역내에 생성) -> 접근제한자를 붙일수가 없다 
		int l = 0; // 지역변수
		if(true) {
			int a = 5; // 지역변수
		}
		// 해당 클래스 객체 생성시 jvm이 값을 자동으로 초기화 시켜주기 때문에 에러안남
		System.out.println(global);
		
		System.out.println(l);
		
		// 매개변수 초기화하지 않아도 에러나지 않는 이유 : 해당 메소드를 호출할때 "반드시" 값을 넘겨줘야 실행이 되기 때문.
		System.out.println(num);
	}
	
	
	
}








